@Library('juju-pipeline@master') _

def exec(cmd) {
    sh "juju ssh -m ${CONTROLLER}:default ubuntu/0 -- bash -c 'cd /project && ${cmd}'"
}

pipeline {
    agent {
        label 'runner-amd64-1'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "${utils.cipaths}"
        CONTROLLER = "validate-microk8s-${uuid()}"
    }
    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 1, unit: 'HOURS')
    }
    stages {
        stage('Set Start Time') {
            steps {
                setStartTime()
            }
        }
        stage('Setup LXC') {
            steps {
                sh "juju bootstrap aws ${CONTROLLER}"
                sh "juju deploy -m ${CONTROLLER}:default ubuntu"
                sh "juju wait -vw -m ${CONTROLLER}:default"
            }
        }
        stage('Wait for snap') {
            options {
                retry(20)
            }
            steps {
                exec "sudo snap install core"
            }
        }
        stage('Install dependencies') {
            steps {
                exec "sudo snap install charm --classic"
                exec "sudo snap install jq"
                exec "sudo snap install juju --classic --channel ${params.juju_channel}"
                exec "sudo snap install juju-kubectl --classic --edge"
                exec "sudo snap install juju-wait --classic"
                exec "sudo snap install kubectl --classic"
                exec "sudo snap install lxd"
                exec "sudo snap install microk8s --classic --channel ${params.microk8s_channel}"
                exec "sudo snap install yq"
                exec "sudo apt update && sudo apt install -y python-tox docker.io"
            }
        }
        stage('Deploy kubeflow') {
            steps {
                exec "/snap/bin/microk8s.status --wait-ready --timeout 300"
                exec "microk8s.enable dns storage registry"
                exec 'microk8s.kubectl patch configmap -n kube-system kube-dns -p "$(<jobs/validate-kubeflow-microk8s/nameservers.json)"'
                exec "juju bootstrap lxd --debug"
                exec "microk8s.config | juju add-k8s microk8s-cloud"

                exec "juju add-model microk8s-model microk8s-cloud"
                exec "juju create-storage-pool operator-storage kubernetes storage-class=microk8s-hostpath"
                exec "juju deploy kubeflow --channel ${params.channel}"

                exec "juju-wait -wvt 900"

                exec 'juju status | grep "kubeflow-ambassador " | awk "{print \\$8}" > PUB_IP'
                exec "juju config kubeflow-ambassador juju-external-hostname=localhost"
                exec "juju expose kubeflow-ambassador"
            }
        }
        stage('Validate') {
            steps {
                exec '''
                    cd jobs/ && \
                    PY_IGNORE_IMPORTMISMATCH=1
                    CONTROLLER=localhost-localhost
                    MODEL=microk8s-model
                    tox
                        -e py36
                        --
                        pytest
                            -v
                            -s
                            --junit-xml=validate.xml
                            integration/test_kubeflow.py::test_validate
                '''.replaceAll('\\s+', ' ')
            }
        }
    }
    post {
        success {
            setPass()
        }
        failure {
            setFail()
        }
        always {
            setEndTime()
//            collectDebug(params.controller, juju_model)
        }
        cleanup {
            saveMeta()
            sh "juju kill-controller ${CONTROLLER} -yt0"
        }
    }
}
